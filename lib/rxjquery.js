/**
 * @fileoverview jQuery to Rx helpers
 * @author roger.castillo@loku.com (Roger Castillo)
 */


var Rx = require('rx').Rx;
var jsdom = require('jsdom');
var _ = require('underscore');
var URL = require('url');
var fs = require('fs');


var jquery = fs.readFileSync(__dirname + '/jquery-1.7.1.min.js').toString();
/**
 * Creates an observable sequence of jQuery elements generated by selector on
 * body
 * @param {String} body
 * @param {String} selector
 * @param {String} [ext] loaded jQuery extensions
 * @param {String} sourceUrl
 */
function createObservablejQuery(body, selector, ext, sourceUrl) {
  var srcs = [jquery];
  if (ext) {
    srcs.push(ext);
  }
  return Rx.Observable.Create(function(obs){
    try {
      //console.log('parsing body for selector:' + selector);
      jsdom.env({
        html: body,
        src: srcs,
        done:function (err, window) {
          var $ = window.jQuery;

          // ToDo: Handle empty case
          var es = $(selector);
          if (es && es.length == 0) {
            obs.OnCompleted();
          } else {
            // emit each selected element
            $.each(es, function(k, v){
              obs.OnNext({elem:$(this), sourceUrl:sourceUrl});
              if (k == (es.length - 1)) {
                obs.OnCompleted();
              }
            });
          }
        }});// end jsdom
      
    } catch (e){
      //console.log('error!');
      obs.OnCompleted();
    }
    return function(){};
  });
}

exports.createObservablejQuery = createObservablejQuery;